
---QUERIES FOR CREATING TABLE---

CREATE TABLE Student (
StudentID INT PRIMARY KEY,
AccountID INT NOT NULL,
FirstName VARCHAR(50) NOT NULL,
LastName VARCHAR(50) NOT NULL,
Birthday DATE NOT NULL,
Gender CHAR(10) NOT NULL,
Nationality1 VARCHAR(50) NOT NULL,
Nationality2 VARCHAR(50) ,
IdNo VARCHAR(12) NOT NULL ,
);

CREATE TABLE Contact (
ContactID INT PRIMARY KEY,
AccountID INT NOT NULL,
Email VARCHAR(50) NOT NULL,
Phone VARCHAR(15) NOT NULL,
Address VARCHAR(250) NOT NULL,
District VARCHAR(50),
City VARCHAR(50) NOT NULL,
Country VARCHAR(50) NOT NULL,
ZipCode INT NOT NULL,
);

CREATE TABLE Education (
EduID INT PRIMARY KEY,
AccountID INT NOT NULL,
College VARCHAR(250) NOT NULL,
Department VARCHAR(50) NOT NULL,
GPA DECIMAL(3,2) NOT NULL,
Degree VARCHAR(50) NOT NULL,
StatusOfGrad TINYINT NOT NULL,
GraduationDate DATE NOT NULL,
);

CREATE TABLE Documents (
DocID INT PRIMARY KEY,
AccountID INT NOT NULL,
TypeID TINYINT NOT NULL,
UploadDate DATETIME NOT NULL,
FileLocation VARCHAR(200) NOT NULL
);

CREATE TABLE DocTypes (
TypeID TINYINT PRIMARY KEY,
Type VARCHAR(50) NOT NULL,
);

CREATE TABLE Application (
ApplicationID INT PRIMARY KEY,
AccountID INT NOT NULL,
ApplicationDay DATE NOT NULL,
isCompleted TINYINT NOT NULL,
);

CREATE TABLE Disability (
DisabilityID INT PRIMARY KEY,
AccountID INT NOT NULL,
isExist TINYINT NOT NULL,
Description  VARCHAR(250) 
);

CREATE TABLE Account (
AccountID INT PRIMARY KEY,
Password VARCHAR(20) NOT NULL,
Email  VARCHAR(50) NOT NULL,
AccountCreatingDate DATETIME NOT NULL
);


---QUERIES FOR INSERTING VALUES TO THE TABLES---


INSERT INTO Account(Password,Email,AccountCreatingDate)
VALUES
('es613455*','esma@khas.edu.tr','2023-05-10'),
('ya3434nizamoglu*','yagmur@khas.edu.tr','2023-05-10'),
('ozge98hasedutr','ozge@khas.edu.tr','2023-05-10'),
('{mert93kadirhas}*','yagmur@khas.edu.tr','2023-01-10'),
('diana34*_*','diana@khas.edu.tr','2023-02-10'),
('jankows-9934','jankowski@khas.edu.tr','2023-02-10'),
('jess*_*','jessica@khas.edu.tr','2023-02-10'),
('david[??]*','David_Vlahos@khas.edu.tr','2023-02-10'),
('Angela[34]_','angela@khas.edu.tr','2023-02-10'),
('rob98_0','robert@khas.edu.tr','2023-02-10'),
('josefros!#','josef.rossii@khas.edu.tr','2023-02-10')

INSERT INTO Student(AccountID,FirstName,LastName,Birthday,Gender,Nationality1,Nationality2,IdNo)
VALUES
(1,'Esmanur','Paksoy','2002-01-02','Female','Turkish','','24589528641'), 
(2,'Yağmur','Nizamoglu','1998-01-30','Female','Turkish','','52698342774'),
(3,'Ozge','Türetken','1997-06-21','Female','Turkish','','65482193050'),
(4,'Mert','Ecevit','1990-08-09','Male','Turkish','','96425792746'), 
(5,'Diana','Weber','1998-11-17','Female','German','American','U198457'),
(6,'Frank','Jankowski','1996-08-31','Male','Polish','','A951753'),  
(7,'Jessica','Peters','1995-06-23','Female','Dutch','','E390201'),  
(8,'David','Vlahos','1999-09-16','Male','Greek','','I649681'), 
(9,'Angela','Shevchuk','2000-04-18','Female','Ukrainian','','U201760'), 
(10,'Robert','Müller','1996-12-24','Male','German','','W308763'), 
(11,'Josef','Rossi','1997-10-29','Male','Italian','American','E340918') 

INSERT INTO Contact(AccountID,Email,Phone,Address,District,City,Country,ZipCode)
VALUES
(1,'paksoyesma3461@gmail.com','+905524693461','Saray street Apt/01','Bahçelievler','İstanbul','Turkey',34),
(2,'yagmurnizamoglu@gmail.com','+905556395814','Fevzi Cakmak street Apt/38','Bahcelievler','İstanbul','Turkey',34),
(3,'ozgeturetken@gmail.com','+905326785496','Balat street Apt/21','Fatih','İstanbul','Turkey',34),
(4,'mertecevit@khas.edu.tr','+905350207968','Bagdat street Apt/3B','Maltepe','İstanbul','Turkey',34),
(5,'diana.weber@hotmail.com','+4915124906546','Amin Arian Lo Giron Dülle 84 44799 Bochum','','Hamburg','Germany',20097),
(6,'jankowski_frank@gmail.com','+4878124906914','Team M/Werbeagentur GMBH Morikestrasse Filterstadt','','Wroclaw','Polon',06),
(7,'jessica.peters@gmail.com','+3185764291551','Efos Food International GMBH Baumgartner STR. 1/1 D-7830 Emmendingen','Lahey ','Zuid','Holland',1002),
(8,'David_Vlahos349@gmail.com','+30895716954','Franz-Josef Baumgartner','','Rodopi','Greece',694),
(9,'Angela_Shevcuk@gmail.com','+38059671258','Team M/Werbeagentur GMBH ','','Kiev','Ukraine ',01004),
(10,'Robert.Müller1308@gmail.com','+4985193746','Redtenbacher STR.Heilderberg','','Berlin','Germany',10178),
(11,'josef_rossii97@gmail.com','+39852147854','Via S. Marino, 18','','Roma','Italia',00198)

INSERT INTO Education(AccountID,College,Department,GPA,Degree,StatusOfGrad,GraduationDate)
VALUES
(1,'Biruni university','Computer Programmer',3.5,'Associate degree',0,'2022-06-22'),
(2,'Istanbul Technical University','Civil Engineering',3.5,'Bachelor',1,'2021-06-22'),
(2,'Bogazici University','Civil Engineering',3.5,'Master',0,'2024-06-22'),
(3,'Yıldız Technical University','Civil Engineering',3.6,'Bachelor',1,'2020-06-18'),
(3,'Yıldız Technical University','Civil Engineering',3.4,'Master',0,'2023-06-18'),
(4,'Istanbul Technical University','Computer Engineering',3.1,'Bachelor',1,'2013-02-10'),
(4,'Yıldız Technical University','Computer Engineering',3.9,'Master',0,'2016-06-20'),
(5,'Münih Technical University','Computer Engineering',2.9,'Bachelor',1,'2022-06-22'),
(5,'Münih Technical University','Computer Engineering',3.9,'Master',0,'2025-06-22'),
(6,'University of Wroclaw','Software Engineering',2.8,'Bachelor',0,'2025-07-28'),
(7,'Amsterdam University','Architecture',3.4,'Bachelor',1,'2022-06-25'),
(7,'Amsterdam University','Architecture',3.4,'Master',0,'2024-06-25'),
(8,'Atina University','International Trade',3.4,'Bachelor',0,'2024-07-23'),
(9,'Kiev University','Mechanical Engineering',3.4,'Bachelor',0,'2026-07-28'),
(10,'Berlin University','Journalism',3.4,'Bachelor',0,'2024-02-12'),
(11,'Bologna University','Aerospace Engineering',3.8,'Bachelor',0,'2024-06-10')

INSERT INTO Disability(AccountID,isExist,Description)
VALUES
(1,0,''),
(2,0,''),
(3,0,''),
(4,0,''),
(5,0,''),
(6,1,'deaf'),
(7,0,''),
(8,1,'blind'),
(9,1,''),
(10,0,''),
(11,1,'autism spectrum disorder')

INSERT INTO DocTypes(Type)
VALUES
('CV'), --ıd=1
('Letter of Intent'), --ıd=2
('Passport'), --ıd= 3
('Residence Document'), --ıd= 4
('Diploma'), -- ıd= 5
('Certificate in English Proficiency') --ıd= 6

INSERT INTO Documents(AccountID,TypeId,UploadDate,FileLocation)
VALUES
(1,1,'2023-01-19','‪C:\Users\Yağmur\Desktop\100KY\CV_01.pdf'),
(1,2,'2023-01-19','C:\Users\Kisi\Desktop\100KY\LetterOfInt_01.pdf'),
(1,3,'2023-01-19','C:\Users\Kisi\Desktop\100KY\Pass_01.pdf'),
(2,1,'2023-01-02','C:\Users\Kisi\Desktop\100KY\CV_02.pdf'),
(2,2,'2023-01-02','C:\Users\Kisi\Desktop\100KY\LetterOfInt_02.pdf'),
(2,4,'2023-01-02','C:\Users\Kisi\Desktop\100KY\ResidDoc_02.pdf'),
(2,5,'2023-01-02','C:\Users\Kisi\Desktop\100KY\Diplama_02.pdf'),
(3,1,'2023-01-07','C:\Users\Kisi\Desktop\100KY\CV_03.pdf'),
(3,5,'2023-01-07','C:\Users\Kisi\Desktop\100KY\Diplama_03.pdf'),
(4,5,'2023-01-04','C:\Users\Kisi\Desktop\100KY\Diplama_04.pdf'),
(5,6,'2023-01-06','C:\Users\Kisi\Desktop\100KY\Proficiency_05.pdf'),
(6,2,'2023-01-01','C:\Users\Kisi\Desktop\100KY\LetterOfInt_06.pdf'),
(6,3,'2023-01-01','C:\Users\Kisi\Desktop\100KY\Pass_06.pdf'),
(7,1,'2023-01-10','C:\Users\Kisi\Desktop\100KY\CV_07.pdf'),
(8,2,'2023-01-03','C:\Users\Kisi\Desktop\100KY\LetterOfInt_08.pdf'),
(9,3,'2023-01-19','C:\Users\Kisi\Desktop\100KY\Pass_09.pdf'),
(10,5,'2023-01-11','C:\Users\Kisi\Desktop\100KY\Diploma_10.pdf'),
(11,6,'2023-01-05','C:\Users\Kisi\Desktop\100KY\Proficiency_11.pdf')


INSERT INTO Application(AccountID,ApplicationDay,isCompleted)
VALUES
(1,'2023-07-19',1),
(2,'2023-07-02',1),
(3,'2023-07-07',1),
(4,'',0),
(5,'2023-07-06',1),
(6,'2023-07-01',1),
(7,'2023-07-10',1),
(8,'2023-07-03',1),
(9,'2023-07-19',1),
(10,'2023-07-11',1),
(11,'',0)


---UPDATE QUERIES---

--Öğrencinin mezuniyet yılını yanlış girmesi nedeniyle oluşturulan update sorgusu
--ve adresini değiştiren öğrenci nedeniyle oluşturulan update sorgusu

UPDATE Education
SET GraduationDate = '2023-09-06'
WHERE AccountID = '9';


UPDATE Contact 
SET Address = 'Marii Sklodowskiej-Curie 5/6', District = 'Wesola Zachod', City = 'Krakow', Country = 'Poland', ZipCode = '31034'
WHERE AccountID = '6';


---DROP QUERIES---

--Document tablosundaki InstallDate kolonunu silme
--Alter table Documents drop column UploadDate;

--Disability adlı tabloyu database'den siler.
--Drop Table Disability; 


---EXAMPLES OF QUERIES GIVEN IN DOCUMENT SQL2---

-- 1- Masterını henüz tamamlamamış olan öğrencilerin okullarını veren sorgu:
Select College,Degree,StatusOfGrad
FROM Education 
WHERE Degree='Master'AND StatusOfGrad=0;


-- 2- Ortalaması 3.5'in üzerinde olan ve 1995'ten önce doğan öğrencilerin okulları ve hesap ID'sini veren sorgu:
SELECT Student.AccountId,Student.FirstName,Student.LastName,Student.Birthday, College FROM Education 
JOIN Student ON Student.AccountId=Education.AccountID
WHERE GPA > 3.5 AND Birthday <='1995-01-01' ;


-- 3- 2023-07-05 tarihinden sonra yapılan başvuruların ID'sini veren sorgu:
SELECT ApplicationId
FROM Application
WHERE ApplicationDay >= '2023-07-05';


-- 4- Bir hesabın toplam kaç adet belge yüklediğini hesaplayan sorgu:
SELECT AccountID, Count(TypeID) AS TotalNumberofUploadedDocuments 
FROM Documents
GROUP BY AccountID;


-- 5- Adresi Türkiye'de bulunmayan ya da milliyeti türk olmayan öğrencilerin isim, soyisim, ülkeleri, 1. milliyetleri ve hesap ID'leri:
Select Student.AccountID,Student.FirstName,Student.LastName,Nationality1,Country 
FROM Student
JOIN Contact ON Student.AccountID =Contact.AccountID
WHERE Country NOT LIKE '%Turkey%' OR Nationality1 NOT LIKE '%Turkish%';


-- 6- İsmi Y ile başlayan öğrencilerin hesap ID'sini,adını ve soyadını veren sorgu:
SELECT AccountID,FirstName,LastName 
FROM Student
WHERE FirstName LIKE 'Y%';


-- 7- Yaşadığı şehrin ikinci harfi s olan öğrencilerin mail adreslerini veren sorgu:
SELECT Email 
FROM Contact
WHERE City LIKE '_s%';


-- 8- Milliyeti türk olmayan öğrencilerin hesap ID'sini veren sorgu:
SELECT AccountID 
FROM Student
WHERE Nationality1 NOT LIKE '%Turkish%';


-- 9- 10/07/2023 ve 01/07/2023 tarihleri arasında başvuran öğrencilerin adreslerini veren sorgu:
SELECT ApplicationDay,Address,District,City,Country 
FROM Application
JOIN Contact on Contact.AccountID=Application.AccountID
WHERE ApplicationDay BETWEEN '2023-07-05' AND '2023-07-19';

-- 10- Kiev ve Berlinde yaşayan öğrencilerin adını soyadını listeleyen sorgu:
SELECT Student.FirstName,Student.LastName,City FROM Contact
JOIN Student ON Student.AccountID=Contact.AccountID
WHERE City IN ('Berlin','Kiev');

-- 11- IdNosu olmayan öğrencilerin hesap ID'sini bulan sorgu:
SELECT AccountID 
FROM Student
WHERE IdNo IS NULL;


-- 12- GPA'leri 2.5 ile 3 arasında olan öğrencilerin okullarını ve hesap ID'lerini artan GPA'ye göre sıralayan sorgu: 
SELECT AccountID,GPA,College
FROM Education
WHERE GPA BETWEEN 2.5 AND 3
ORDER BY GPA ASC;


-- 13- Öğrencilerin hesap ID'sini başvuru tarihi artan, hesap açılış tarihi azalan olacak şekilde sıralayan sorgu:
SELECT Account.AccountID,Application.ApplicationDay,AccountCreatingDate 
FROM Account
JOIN Application on Account.AccountID=Application.AccountID
ORDER BY ApplicationDay ASC, AccountCreatingDate DESC;


-- 14- Hangi farklı şehirlerden başvuruda bulunulmuştur bilgisini veren sorgu:
SELECT DISTINCT City
FROM Contact;


-- 15- Hangi farklı şehirlerden başvuruda bulunmuştur bilgisini veren sorgu (posta koduna göre):
SELECT DISTINCT ZipCode
FROM Contact;


---EXAMPLES OF QUERIES GIVEN IN DOCUMENT SQL3---

-- 1- Student tablosundaki öğrenci sayısı
SELECT COUNT(StudentID) as 'how many students'
FROM Student;  -- answer : 11

-- 2- Student tablosunda doğum yılı en küçük olan 
SELECT MIN(Birthday) as 'smallest year of birth'
FROM Student

-- 3- En geç açılan hesap tarihi
SELECT MAX(AccountCreatingDate) as 'latest account opening date'
FROM Account

-- 4- Öğrenci ortalamalarının toplamı
SELECT SUM(GPA) as 'sum of student averages'
FROM Education

-- 5- Öğrencilerin mezun oduğu ortalamalrın genel ortalaması
SELECT AVG(GPA) as 'student averages'
FROM Education

-- 6- Milliyeti Ukrayna olan öğrencinin sahip olduğu cinsiyete ait tüm öğrencileri çağıran sorgu.
SELECT * FROM Student where 
Gender=(select gender from Student where Nationality1 = 'Ukrainian') --SUBQUERY

-- 7- Makine Mühendisi olan ögrencinin derecesine sahip tüm öğrencileri çağıran sorgu.
SELECT * FROM Education where 
Degree=(select Degree from Education where Department = 'Mechanical Engineering') --SUBQUERY

-- 8- StatusOfGrad özelliği 0 ve 1 olanları grup halinde ortalamalarını yazdırır.
SELECT StatusOfGrad,avg(GPA) FROM Education
GROUP BY StatusOfGrad 
 
-- 9- StatusOfGrad özelliği 0 ve 1 olanların ortalamalarının 3'den büyük olan üniversite sayısını verir.
SELECT StatusOfGrad,avg(GPA), COUNT(College) FROM Education
GROUP BY StatusOfGrad 
HAVING AVG(GPA) > 3

-- 10- StatusOfGrad özelliği 0 ve 1 olanların ortalamalarının 3'den büyük olan üniversite sayısını azalana göre yazdırır.
SELECT StatusOfGrad,avg(GPA), COUNT(College) FROM Education
GROUP BY StatusOfGrad 
HAVING AVG(GPA) > 3
ORDER BY AVG(GPA) ASC


---EXAMPLES OF QUERIES GIVEN IN DOCUMENT SQL4---

-- 1- Öğrenci isim ve kısa iletişim bilgilerini birleştiren sorgu
SELECT FirstName, LastName, Email, Phone
FROM Student, Contact
WHERE Student.AccountID=Contact.AccountID;


-- 2- Öğrenci isim, soyisim, vatandaşlık ile ülke, email, telefon bilgilerini birleştiren sorgu
SELECT Student.FirstName, Student.LastName,
Contact.Email, Contact.Phone,Student.Nationality1, Contact.Country
FROM Student, Contact
WHERE Student.AccountID=Contact.AccountID;


-- 3- Aynı niteliklere sahip iki tabloyu birleştirirken
-- ortak niteliğin hangi tablodan geleceğini belirtme sorgusu
SELECT FirstName, LastName, Account.Email, AccountCreatingDate
FROM Student, Account
WHERE Student.AccountID=Account.AccountID
ORDER BY AccountCreatingDate;


-- 4- Birleştirilen tablolarda tüm SQL komutları kullanılabilir; 
--örnek olarak belirli bir tarihten sonra yapılan başvuruları listeleyen sorgu
SELECT Account.AccountID, Country, AccountCreatingDate
FROM Contact, Account
WHERE Contact.AccountId=Account.AccountID AND AccountCreatingDate<'2023-02-15 00:00:00.000';


-- 5- --Alias, sorgu süresi boyunca bir tabloya veya sütuna geçici ad vermek için kullanılır.
--Sütun adlarını daha okunaklı hale getirmek amaçlanır.
--Aşağıdaki alias sorgusunda iki tablodan farklı sütunlar bir araya getirildiğinde, Documents 
--tablosundan gelen sütunlara 'd', Education tablosundan gelen sütunlara 'e' takma adı verilmiştir.
--(Örnek sorgunun amacı, öğrencilerin bölümlerine göre yüklenen dökümanları ve mezuniyet 
--bilgilerini görüntülemektir. Takma adlar kullanılmak istenmezse AS ifadesi sorgudan 
--çıkarıldığında sorgu yine çalışır).

SELECT d.TypeID, d.UploadDate, e.Department, e.Degree,e.GPA, e.GraduationDate
FROM Documents AS d, Education AS e
WHERE d.AccountID=e.AccountID
ORDER BY GPA;


-- 6- Left join sorgusu
SELECT FirstName, Student.AccountID, Contact.District
FROM Student 
LEFT JOIN Contact
ON Student.AccountID=Contact.AccountID;


-- 7- Right join sorgusu
SELECT Country, Contact.AccountID, College
FROM Education 
RIGHT JOIN Contact
ON Education.AccountID=Contact.AccountID;


---EXAMPLE OF VIEW COMPONENT---

--Türkiye dışından başvuran öğrencinin yaşadığı ülke,okul,departman,eğitim durumu, maili ve hesap ID'sini veren sorgu:

CREATE VIEW StudentsFromAbroad AS
SELECT Education.AccountID,Education.College,Education.Degree,Country,Email FROM Contact
JOIN Education ON Education.AccountID=Contact.AccountID
WHERE Country NOT LIKE 'Turkey';

ALTER VIEW StudentsFromAbroad AS
SELECT Education.AccountID,Education.College,Education.Department,Education.Degree,Country,Email FROM Contact
JOIN Education ON Education.AccountID=Contact.AccountID
WHERE Country NOT LIKE 'Turkey';

--Oluşturulan view yapısının kullanım örneği :
SELECT AccountID,Email,Department FROM StudentsFromAbroad;


---EXAMPLE OF STORED PROCEDURE COMPONENT--- 

--Eğitim durumuna göre öğrencilerin ad,soyad,departman,mail ve şehir bilgilerini veren yarayan stored procedure:

CREATE PROCEDURE Student_Dep_Mail_City

@Degree VARCHAR(50),
@StatusOfGrad INT

AS
BEGIN
SELECT Student.AccountID,Student.FirstName,Student.LastName,Education.Department,Contact.Email,Contact.City FROM Education
JOIN Contact ON Education.AccountID=Contact.AccountID
JOIN Student ON Contact.AccountID=Student.AccountID
WHERE Education.Degree=@Degree AND Education.StatusOfGrad=@StatusOfGrad
END

--Oluşturulan stored procedure yapısının kullanım örneği (master yapmaya devam eden öğrencilerin bilgileri) :
EXEC Student_Dep_Mail_City @Degree='Master',@StatusOfGrad=0;


---EXAMPLE OF FUNCTION COMPONENT--- 

--öğrencinin GPA notuna ve English Proficiency belgesine sahip olup olmamasına göre 
--değerlendirmeye alınma öncelik sırasını (1.sırada, 2. sırada ve 3. sırada 
değerlendirilecek grup olmak üzere) belirleyen fonksiyon

CREATE FUNCTION StudentEvaluationGroups (@IdNumber INT)
RETURNS VARCHAR (50)
AS
BEGIN
DECLARE @GpaNum DECIMAL(3,2);
DECLARE @DocTypeId TINYINT;
DECLARE @Result VARCHAR (50);
SELECT @GpaNum = Education.GPA FROM Education WHERE AccountID = @IdNumber
SELECT @DocTypeId = Documents.TypeID FROM Documents WHERE AccountID = @IdNumber
IF (@GpaNum >= 3.30 AND @DocTypeId = 6)
SET @Result = '1st Group Student to Be Evaluated'
ELSE IF (@GpaNum >= 3.30 AND @DocTypeId != 6)
SET @Result = '2nd Group Student to Be Evaluated'
ELSE 
SET @Result = '3rd Group Student to Be Evaluated'
RETURN @Result
END

--Oluşturulan fonksiyonun kullanım örneği :
SELECT dbo.StudentEvaluationGroups ('1')


---EXAMPLE OF TRIGGER COMPONENT--- 

--Student tablosunda bir veri silindiğinde Education gpa değeri 10 artsın.

create trigger triggerGpa
on dbo.[Student]
after delete 
as
Update Education Set GPA = GPA +10
Select * from Education

--Oluşturulan trigger yapısının kullanım örneği :
Delete From Student where StudentID = 11;



